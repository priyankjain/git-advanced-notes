git commit --amend:
> git commit --amend
Combine the staged changes with the previous commit and replace
the previous commit with the result snapshot. Runnig this when there is nothing stages lets you edit the previous commit's message without altering its snapshot
--no-edit flag will allow you to make the amendment to your commit without changing its commit message

git rebase:
Rebasing is the process of moving a branch to a new base commit
Git accomplishes this by creating new commits and applying them
to the specified base  - it's literally rewriting your project history

> git rebase <base>
Rebase the current branch onto <base>, which can be any kind
of commit reference
- The primary reason for rebasing is to maintain a linear project history
- Don't rebase public history

> git rebase -i <base>
Rebase the current branch onto <base>, but use an interactive
rebasing session. This will open a text editor where you can enter commands     for each commit to be rebased. You can also reorder the commits.

git reflog:
Every time the current HEAD gets updated, a new entry will
be added to the reflog.
> git reflog
Show the reflog for the local repository

> git reflog --relative-date
Show the reflog with relative date information

If you accidentally dropped commits, the reflog will contains the commits
master pointed to before you accidentally dropped the commits.
Using git reset it is then possible to change master back to the commit it was before

Reflog only provides a safety net if changes have been committed to your
local repository and that it only tracks movements

