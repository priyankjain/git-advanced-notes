git checkout:
As explained in previous tutorial

git revert:
Undoes a committed snapshot. But instead of removing the commit
from the project history, it figures out how to undo the changes introduced
by the commit and appends a new commit with the resulting content.
This prevents Git from losing history.

Usage:
> git revert <commit>

git reset:
If git revert is a safe way to undo changes, git reset is the dangerous
method. When you undo with git reset, there is no way to retrieve the
original copy - it is a permanent undo.
> git reset <file>
Remove the specified file from the staging area, but leave the working directory unchanged

> git reset
Reset the staging area to match the most recent commit, but leave the working directory unchanged

> git reset --hard
Reset the staging area and the working area to match the most recent commit. 

> git reset <commit> 
Move the current branch tip backward to <Commit>, reset the 
staging area to match, but leave the working directory alone. 
All changes made since <commit> will reside in the working directory.

> git reset --hard <commit>
Move the current branch tip backward to <commit> and reset both the staging area and the working directory to match.

make sure that you’re using git reset <commit> on a local experiment that went wrong—not on published changes. If you need to fix a public commit, the git revert command was designed specifically for this purpose.

git clean:
Removes untracked files from your working directory
> git clean -n
Perform a dry run of git clean. This will show you which files are going 
to be removed without actually doing it.

> git clean -f
Remove untracked files from the current directory. The -f (force) flag is required unless the clean.requireForce configuration option is set to false (it's true by default). This will not remove untracked folders or files specified by .gitignore

> git clean -f <path>
Remove untracked files, but limit the operation to the specified path.

> git clean -df
Remove untracked files and directories from the current directory

> git clean -xf
Remove untracked files from the current directory as well as files that Git usually ignores


