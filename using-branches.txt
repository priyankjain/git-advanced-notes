git branch:
Lets you create, list, rename and delete branches
> git branch
List all of the branches in your repository

> git branch <branch>
Create a new branch called <branch>. This does not check out the new branch

> git branch -d <branch>
Delete the specified branch. This is a safe operation in that Git
prevents you from deleting the branch if it has unmerged changes.

> git branch -D <branch>
Force delete the branch even if it has unmerged changes

> git branch -m <branch>
Rename  the current branch to <branch>

git checkout:
Lets you navigate between the branches created by git branch.

> git checkout <existing-branch>
Switch to the specified branch, which should already exist. 
This updates the working directory to match the contents of branch.

> git checkout -b <new-branch>
Create and checkout new branch

> git checkout -b <new-branch> <existing-branch>
Same as the above invocation, but base the new branch off
of <existing-branch> instead of the current branch.

git merge:
> git merge <branch>
Merge the specified branch into the current branch. Git will determine the 
the merge algorithm automatically.

> git merge --no-ff <branch>
Merge the specified branch into the current branch, but always generate a merge commit (even if it was a fast-forward merge). Useful for documenting all merges that occur in your repository.

- A fast-forward merge can occur when there is a linear
path from the current branch tip to the target branch. 
Instead of actually merging the branches, all Git has to do to integrate
the histories is move ("fast-forward") the current branch tip
up to the target branch tip
- A fast-forward merge is not possible if the branches have diverged. 
When there is not a linear path to the target branch, Git uses 3-way merge:
using three commits to generate the merge commit: the two branch
tips and their common ancestor.

Resolving conflicts:
- If both branches edit same part of the same file, Git stops right before the
merge commit
- The great part of Git's merging process is that it uses the familiar edit/stage/commit workflow to resolve merge conflicts. When you encounter a merge conflict, running the git status command shows you which files need to be resolved.
- Then, you can go in and fix up the merge to your liking. When you're ready to finish the merge, all you have to do is run git add on the conflicted file(s) to tell Git they're resolved. Then, you run a normal git commit to generate the merge commit.
