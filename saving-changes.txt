git add: Adds a change in the working directory to the staging area
> git add <file>
Stage all changes in <file> for the next commit

> git add <directory>
Stage all changes in <directory> for the next commit

> git add -p
Begins an interactive staging session that lets you choose portions of a file to add to the next commit.
This will present you with a chunk of changes and prompt you for a command. Use y to stage the chunk,
n to ignore the chunk, s to split it into smaller chunks, e to manually edit the chunk and q to exit


Developing a project revolves around the basic edit/stage/commit pattern

The Staging Area:
Instead of committing all of the changes you've made since the last commit, the stage lets you group related changes into highly focused snapshots before actually committing it into the project history.


git commit: Commits the staged snapshot to the project history
> git commit
Commit the staged snapshot

> git commit -m "<message>"
Commit the staged snapshot but instead of launching a text editor, use <message> as the commit message

> git commit -a
Commit a snapshot of all changes in the working directory. This only includes modifications to tracked files (those that have been added with git add at some point in the history)
