git init
> git init
Transforms the current directory into a Git repository

> git init <directory>
Create an empty git repository in the specified directory

> git init --bare <directory>
Initialize an empty git repository, but omit the working directory
bare flag specified not to create the working directory, making it impossible to edit files and commit changes in that repository
Central repositories are bare and developers local repositories are non-bare

git clone
> git clone <repo>
Clone the repository located at <repo> onto the local machine

> git clone <repo> <directory>
Clone repository into specified directory

> git clone --bare <repo>
Clone repository without working directory

git config
> git config user.name <username>
Define the author name to be used for all commits in the current repository

> git config --global user.name <username>
Define the author name to be used for all commits by the current user

> git config --global user.email <email>
Define the author email to be used for all commits by the current user

> git config --global alias.<alias-name> <git-command>
Create a shortcut for a Git command

> git config --global core.editor <editor>
Define the text editor used by commands like git commit for all users on the current machine

> git config --global --edit
open the global configuration file in a text editor for manual editing

Git stores configuration options in three seperate files, which let you scope options to individual repositories, users or the entire
system:
1. <repo>/.git/config - Repository specific settings
2. ~/.gitconfig - User specific settings
3. /etc/gitconfig - System wide settings
Local settings (repository-specific settings) override global settings (user-specific settings) which override system-wide settings